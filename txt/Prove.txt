===============================================================================================
                                    Structure AST tree
===============================================================================================
    1 - reactant
    AST_TIMES
    ├── AST_NAME("beta")
    └── AST_POWER
        ├── AST_NAME("Prey")
        └── AST_CN(1)

    2 - reactants
    AST_TIMES
    ├── AST_TIMES
    │   ├── AST_NAME("beta")
    │   └── AST_POWER
    │       ├── AST_NAME("Prey")
    │       └── AST_CN(1)
    └── AST_POWER
        ├── AST_NAME("Predator")
        └── AST_CN(1)

    3 - reactants
    (times)
    ├── (times)
    │    ├── (times)
    │    │     ├── beta
    │    │     └── pow(Prey, 1)
    │    └── pow(Predator, 1)
    └── pow(SomeOther, 1)

    ...

===============================================================================================
                                    ODE_simulation with chempy
===============================================================================================
    def get_unit_registry():
        """Costruisce un dizionario unit_registry compatibile usando Pint."""
        ureg = pint.UnitRegistry()
        return {
            'time': ureg.second,
            'length': ureg.meter,
            'mass': ureg.kilogram,
            'amount': ureg.mole,
            'temperature': ureg.kelvin,
        }

    def get_kinetic_constant(ast, kinetic_law, reactants):
        kinetic_constant = None
        if kinetic_law is None:
            raise Exception("Kinetic law not set.")

        if ast is None:
            raise Exception("AST is None.")

        # Always * at the root
        if ast.getType() != libsbml.AST_TIMES:
            raise Exception("AST's root is not TIMES(*).")

        #  all child nodes (multiplicands)
        for child in [ast.getChild(i) for i in range(ast.getNumChildren())]:
            if child.getType() == libsbml.AST_TIMES:
                kinetic_constant= get_kinetic_constant(child, kinetic_law, reactants)
            elif child.getType() == libsbml.AST_NAME:  # kinetic constant
                child_name = child.getName()
                if child_name not in reactants:
                    kinetic_constant = child_name

        return kinetic_constant

    def print_odesys(odesys):
        odes_str = {}

        symbol_map = {Symbol(f'y_{i}'): Symbol(name) for i, name in enumerate(odesys.names)}

        for i, sp in enumerate(odesys.names):
            ode_expr = odesys.exprs[i]  # sostituisci y_i con nome specie
            odes_str[sp] = f"d[{sp}]/dt = {str(ode_expr)}"

        for i, (k, v) in enumerate(symbol_map.items()):
            for sp in odes_str:
                odes_str[sp] = odes_str[sp].replace(str(k), str(v))

        for k in odes_str:
            print(odes_str[k])

    def generate_odes(model):
        reactions = []
        parameters = extract_parameters(model)
        substances = extract_species(model)

        for r in model.getListOfReactions():
            reac_stoich = {}
            prod_stoich = {}

            # Reactants
            for reactant in r.getListOfReactants():
                reac_stoich[reactant.getSpecies()] = reactant.getStoichiometry()

            # Products
            for product in r.getListOfProducts():
                prod_stoich[product.getSpecies()] = product.getStoichiometry()

            # Kinetic law
            kinetic_law = r.getKineticLaw()
            if kinetic_law is None:
                raise Exception(f"No kinetic law for reaction: {r.getId()}")

            kinetic_costant = get_kinetic_constant(kinetic_law.getMath(), kinetic_law, substances)

            # Crea la reazione chempy (senza valutazione della legge cinetica)
            r = Reaction(reac_stoich, prod_stoich, param=parameters[kinetic_costant], name=r.getId())
            reactions.append(r)

        # ODE system
        rsys = ReactionSystem(reactions)
        unit_registry = get_unit_registry()
        odesys, extra = get_odesys(rsys, unit_registry)
        print_odesys(odesys)

        return odesys, parameters, substances, rsys

    def simulate_odes(model):
        odesys, parameters, species, rsys  = generate_odes(model)

        if species is None:
            raise Exception("Model has no species")

        # TODO: controllare unità di misura

        timepoints = np.linspace(0, 1, 1000)
        result = odesys.integrate(timepoints, species, parameters, integrator='cvode')
        #result.yout = np.clip(result.yout, 0, None)
        ode_plot(result)

===============================================================================================
                                  Condizione in extract_species
===============================================================================================

elif s.isSetInitialConcentration():  # We have to do: amount = volume * InitialConcetrantion.
    compartment = self.model.getCompartment(s.getCompartment())
    if not compartment.isSetSize():
        raise Exception("The size compartment is not set.")
    volume = compartment.getSize()
    try:
        species[s.getId()] = volume * s.getInitialConcentration()
    except TypeError:  # Example: value * None
        raise Exception("Unable to extract InitialAmount from InitialConcentration.")


===============================================================================================
                                  plot del ODE
===============================================================================================


def ode_plot(result, filename):

    for i, name in enumerate(result.odesys.names):  # nomi delle specie
        value = result.yout[:, i]
        plt.plot(result.xout, value, label=name)

    plt.xlabel("Tempo")
    plt.ylabel("Concentrazione")
    plt.title(f"{filename}")
    plt.xlim(left=0)
    plt.ylim(bottom=0)
    plt.legend()
    plt.grid(True)
    plt.title("Evoluzione delle specie nel tempo")

    ''''''if GRAPH_FOLDER:
        os.makedirs(GRAPH_FOLDER, exist_ok=True)
        file_path = os.path.join(GRAPH_FOLDER, "ODEs_plot.png")
        if os.path.exists(file_path):
            os.remove(file_path)  # Elimina il file precedente
        plt.savefig(file_path)
        print(f"Grafico salvato in: {file_path}")''''''

    plt.show()